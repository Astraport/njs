h1. fxs - cross domain policy file server

A "nodejs":http://nodejs.org cross domain policy file server for Adobe Flash clients.

The server responds to cross domain policy file requests such as @<policy-file-request/>@ with the cross domain policy file specified in the configuration.

The cross domain file is loaded when the server starts and monitored for changes; if it changes it is reloaded into memory.

See the "cross domain policy file specification":http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html for more information.

When the server receives anything other than a @<policy-file-request/>@ it behaves as an echo server.

h2. Installation

Installation is done using "npm":http://npmjs.org/:

bc. npm install fxs

h2. Configuration

Configuring the server options is achieved with a json configuration file, if no custom configuration file is specified when starting the server the "default configuration file":https://github.com/freeformsystems/node-fxs/blob/master/src/main/js/conf.json will be used.

bc. {
    "port":     843,
    "host":     "127.0.0.1",
    "euid":     501,
    "watch":    true,
    "monitor": {
        "persistent": true,
        "interval": 0
    }
}

The @host@ and @port@ parameters are self-explanatory. The @policy@ parameter is the file system path to the cross domain xml document that the server will send back to clients, if the @policy@ parameter is omitted then the "default cross domain policy file":https://github.com/freeformsystems/node-fxs/blob/master/src/main/js/crossdomain.xml will be used.

In order to allow Flash clients to connect to ports below 1024 (a typical use case is raw socket access to a web server running on port 80) the server must be running on a port lower than 1024 which in turn entails starting the server as the root user.

Running processes as root is not a good idea so you *must* configure an @euid@ parameter when running the server as root. If you do not configure @euid@ and attempt to run as root you will see this error message:

bc. fxs: running as root but no effective uid configured

To specify a username use a string value otherwise specify an integer of the uid for the user.

Once the server has bound to the privileged port the effective uid of the process is set using @process.setuid( this.options.euid )@.

h3. watch

By default the cross domain policy file is watched for changes, if you know it won't change or are prepared to restart the server when changing the cross domain policy file you should switch off the logic to watch the policy file:

bc. {
    "watch": false
}

h3. monitor

The monitor configuration specifies the options for the @fs.watchFile()@ call, this can be used to alter the speed at which the policy file is polled:

bc. {
    "monitor": {
        "persistent": true,
        "interval": 100
    }
}

The interval is the number of milliseconds to poll the file.

h2. Server

To run the server from your program using the default configuration file (and default cross domain policy file):

bc. var fxs = require( "fxs" );
fxs.start();

To run the server from your program using a custom configuration file:

bc. var fxs = require( "fxs" );
fxs.start( "/fxs/conf/conf.json" );

h3. Server Events

* @error@ - Emitted when the server encounters an error.
* @connected@ - Emitted when the server has successfully bound and is listening on the specified host and port.
* @reload@ - Emitted when the server has successfully reloaded the cross domain policy file.
* @closed@ - Emitted when the server has been closed.

h2. Client

To send a policy file request to the server without using a Flash client you can do:

bc. var fxs = require( "fxs" );
fxs.ping();

Or if you have changed the server @port@ and @host@:

bc. var fxs = require( "fxs" );
fxs.ping( 10000, "hostname" );

To listen for the cross domain policy response when sending a request use the @policy@ event:

bc. var client = fxs.ping();
client.on( "policy", function( contents )
{
    //do something
} );

When sending anything other than a policy file request, you can listen for the echo event:

bc. var message = "hello world"
var client = fxs.client( port, host );
client.on( "echo", function( contents )
{
    //do something with echo response
} );
client.send( message );

h3. Client Events

* @error@ - Emitted when the client encounters an error.
* @policy@ - Emitted when the client receives a cross domain policy file.
* @echo@ - Emitted when the client receives an echo response.

h2. Running the unit tests

Install "nodeunit":https://github.com/caolan/nodeunit:

bc. npm install nodeunit

Then execute (from the top-level directory of the source tree):

bc. nodeunit test

To run all the tests in the @test@ directory.

h2. Building the Flash client test harness

Building the Flash client is done using "maven":http://maven.apache.org and "flexmojos":http://flexmojos.sonatype.org/, once you have "maven":http://maven.apache.org (>= 3) installed you can run:

bc. mvn clean install

Start the server running on the default 843 port:

bc. sudo node server.js

And then open the @index.html@ file within the @target@ directory to view the Flash client test harness.

h2. Roadmap

h3. 0.2.0

# Improved example Flash client with configurable fields for host and port and ability to test connecting to mock http server on a port specifically allowed by the cross domain policy file.
# Add command line binary programs.

h3. 0.1.0

# -Add proper error handling for the various socket, file io and configuration error cases.-
# -Add support for executing as root and switching effective uid.-
# -Make port 843 the default once 2. is implemented.-
# -Write unit tests.-
# -Better _npm_ integration so installation is via _npm_.-

h2. License

All source code is distributed with a "Creative Commons attribution and share-alike license":http://creativecommons.org/licenses/by-sa/2.0/uk/.